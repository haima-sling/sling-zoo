const Report = require('../models/Report');
const Animal = require('../models/Animal');
const Visitor = require('../models/Visitor');
const Exhibit = require('../models/Exhibit');
const Staff = require('../models/Staff');
const Ticket = require('../models/Ticket');
const { validationResult } = require('express-validator');
const logger = require('../utils/logger');

// Get all reports with pagination and filtering
const getAllReports = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    
    // Build filter object
    const filter = {};
    if (req.query.type) filter.type = req.query.type;
    if (req.query.period) filter.period = req.query.period;
    if (req.query.generatedBy) filter.generatedBy = req.query.generatedBy;
    if (req.query.startDate && req.query.endDate) {
      filter.startDate = { $gte: new Date(req.query.startDate) };
      filter.endDate = { $lte: new Date(req.query.endDate) };
    }
    
    // Build sort object
    const sort = {};
    if (req.query.sortBy) {
      const sortOrder = req.query.sortOrder === 'desc' ? -1 : 1;
      sort[req.query.sortBy] = sortOrder;
    } else {
      sort.createdAt = -1;
    }
    
    const reports = await Report.find(filter)
      .populate('generatedBy', 'firstName lastName role')
      .sort(sort)
      .skip(skip)
      .limit(limit);
    
    const total = await Report.countDocuments(filter);
    
    res.json({
      success: true,
      data: reports,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    logger.error('Error fetching reports:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching reports',
      error: error.message
    });
  }
};

// Get report by ID
const getReportById = async (req, res) => {
  try {
    const report = await Report.findById(req.params.id)
      .populate('generatedBy', 'firstName lastName email role');
    
    if (!report) {
      return res.status(404).json({
        success: false,
        message: 'Report not found'
      });
    }
    
    res.json({
      success: true,
      data: report
    });
  } catch (error) {
    logger.error('Error fetching report:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching report',
      error: error.message
    });
  }
};

// Generate animal health report
const generateAnimalHealthReport = async (req, res) => {
  try {
    const { startDate, endDate } = req.body;
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    // Get animal statistics
    const totalAnimals = await Animal.countDocuments();
    const endangeredCount = await Animal.countDocuments({ isEndangered: true });
    
    // Get health check statistics
    const healthChecks = await Animal.countDocuments({
      lastHealthCheck: { $gte: start, $lte: end }
    });
    
    // Get animals by status
    const statusBreakdown = await Animal.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);
    
    // Get animals by species
    const speciesBreakdown = await Animal.aggregate([
      {
        $group: {
          _id: '$species',
          count: { $sum: 1 },
          endangered: { $sum: { $cond: [{ $eq: ['$isEndangered', true] }, 1, 0] } }
        }
      },
      { $sort: { count: -1 } },
      { $limit: 10 }
    ]);
    
    const reportData = {
      totalAnimals,
      endangeredCount,
      healthChecks,
      statusBreakdown,
      speciesBreakdown
    };
    
    const report = new Report({
      title: `Animal Health Report - ${start.toLocaleDateString()} to ${end.toLocaleDateString()}`,
      type: 'health',
      period: 'custom',
      startDate: start,
      endDate: end,
      generatedBy: req.user.id,
      data: reportData,
      summary: `Generated report covering ${totalAnimals} animals with ${healthChecks} health checks performed.`,
      recommendations: ['Continue regular health monitoring', 'Focus on endangered species care']
    });
    
    await report.save();
    
    logger.info(`Animal health report generated by user: ${req.user.email}`);
    
    res.status(201).json({
      success: true,
      message: 'Animal health report generated successfully',
      data: report
    });
  } catch (error) {
    logger.error('Error generating animal health report:', error);
    res.status(500).json({
      success: false,
      message: 'Error generating animal health report',
      error: error.message
    });
  }
};

// Generate visitor analytics report
const generateVisitorAnalyticsReport = async (req, res) => {
  try {
    const { startDate, endDate } = req.body;
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    // Get visitor statistics
    const totalVisitors = await Visitor.countDocuments({
      createdAt: { $gte: start, $lte: end }
    });
    
    const vipVisitors = await Visitor.countDocuments({
      isVip: true,
      createdAt: { $gte: start, $lte: end }
    });
    
    // Get ticket statistics
    const ticketStats = await Ticket.aggregate([
      {
        $match: {
          purchaseDate: { $gte: start, $lte: end }
        }
      },
      {
        $group: {
          _id: null,
          totalTickets: { $sum: 1 },
          totalRevenue: { $sum: '$price' },
          averagePrice: { $avg: '$price' }
        }
      }
    ]);
    
    // Get ticket type breakdown
    const ticketTypeBreakdown = await Ticket.aggregate([
      {
        $match: {
          purchaseDate: { $gte: start, $lte: end }
        }
      },
      {
        $group: {
          _id: '$type',
          count: { $sum: 1 },
          revenue: { $sum: '$price' }
        }
      },
      { $sort: { count: -1 } }
    ]);
    
    const reportData = {
      totalVisitors,
      vipVisitors,
      totalTickets: ticketStats[0]?.totalTickets || 0,
      totalRevenue: ticketStats[0]?.totalRevenue || 0,
      averagePrice: ticketStats[0]?.averagePrice || 0,
      ticketTypeBreakdown
    };
    
    const report = new Report({
      title: `Visitor Analytics Report - ${start.toLocaleDateString()} to ${end.toLocaleDateString()}`,
      type: 'visitor',
      period: 'custom',
      startDate: start,
      endDate: end,
      generatedBy: req.user.id,
      data: reportData,
      summary: `Generated report covering ${totalVisitors} visitors with total revenue of $${reportData.totalRevenue.toFixed(2)}.`,
      recommendations: ['Increase marketing efforts', 'Consider seasonal promotions']
    });
    
    await report.save();
    
    logger.info(`Visitor analytics report generated by user: ${req.user.email}`);
    
    res.status(201).json({
      success: true,
      message: 'Visitor analytics report generated successfully',
      data: report
    });
  } catch (error) {
    logger.error('Error generating visitor analytics report:', error);
    res.status(500).json({
      success: false,
      message: 'Error generating visitor analytics report',
      error: error.message
    });
  }
};

// Generate financial report
const generateFinancialReport = async (req, res) => {
  try {
    const { startDate, endDate } = req.body;
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    // Get ticket revenue
    const ticketRevenue = await Ticket.aggregate([
      {
        $match: {
          purchaseDate: { $gte: start, $lte: end }
        }
      },
      {
        $group: {
          _id: null,
          total: { $sum: '$price' }
        }
      }
    ]);
    
    // Get revenue by ticket type
    const revenueByType = await Ticket.aggregate([
      {
        $match: {
          purchaseDate: { $gte: start, $lte: end }
        }
      },
      {
        $group: {
          _id: '$type',
          revenue: { $sum: '$price' },
          count: { $sum: 1 }
        }
      },
      { $sort: { revenue: -1 } }
    ]);
    
    const reportData = {
      ticketRevenue: ticketRevenue[0]?.total || 0,
      revenueByType,
      totalRevenue: ticketRevenue[0]?.total || 0
    };
    
    const report = new Report({
      title: `Financial Report - ${start.toLocaleDateString()} to ${end.toLocaleDateString()}`,
      type: 'financial',
      period: 'custom',
      startDate: start,
      endDate: end,
      generatedBy: req.user.id,
      data: reportData,
      summary: `Generated financial report with total revenue of $${reportData.totalRevenue.toFixed(2)}.`,
      recommendations: ['Optimize pricing strategy', 'Increase high-margin offerings']
    });
    
    await report.save();
    
    logger.info(`Financial report generated by user: ${req.user.email}`);
    
    res.status(201).json({
      success: true,
      message: 'Financial report generated successfully',
      data: report
    });
  } catch (error) {
    logger.error('Error generating financial report:', error);
    res.status(500).json({
      success: false,
      message: 'Error generating financial report',
      error: error.message
    });
  }
};

// Generate exhibit occupancy report
const generateExhibitOccupancyReport = async (req, res) => {
  try {
    const { startDate, endDate } = req.body;
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    // Get exhibit statistics
    const exhibits = await Exhibit.find();
    
    const exhibitData = exhibits.map(exhibit => ({
      name: exhibit.name,
      type: exhibit.type,
      capacity: exhibit.capacity.animals,
      currentOccupancy: exhibit.currentOccupancy.animals,
      occupancyRate: ((exhibit.currentOccupancy.animals / exhibit.capacity.animals) * 100).toFixed(2),
      status: exhibit.status
    }));
    
    const reportData = {
      totalExhibits: exhibits.length,
      exhibitDetails: exhibitData,
      averageOccupancy: (exhibitData.reduce((sum, e) => sum + parseFloat(e.occupancyRate), 0) / exhibitData.length).toFixed(2)
    };
    
    const report = new Report({
      title: `Exhibit Occupancy Report - ${start.toLocaleDateString()} to ${end.toLocaleDateString()}`,
      type: 'exhibit',
      period: 'custom',
      startDate: start,
      endDate: end,
      generatedBy: req.user.id,
      data: reportData,
      summary: `Generated report covering ${exhibits.length} exhibits with average occupancy of ${reportData.averageOccupancy}%.`,
      recommendations: ['Balance animal distribution', 'Consider exhibit expansions']
    });
    
    await report.save();
    
    logger.info(`Exhibit occupancy report generated by user: ${req.user.email}`);
    
    res.status(201).json({
      success: true,
      message: 'Exhibit occupancy report generated successfully',
      data: report
    });
  } catch (error) {
    logger.error('Error generating exhibit occupancy report:', error);
    res.status(500).json({
      success: false,
      message: 'Error generating exhibit occupancy report',
      error: error.message
    });
  }
};

// Delete report
const deleteReport = async (req, res) => {
  try {
    const report = await Report.findById(req.params.id);
    if (!report) {
      return res.status(404).json({
        success: false,
        message: 'Report not found'
      });
    }
    
    await Report.findByIdAndDelete(req.params.id);
    
    logger.info(`Report deleted: ${report.title}`);
    
    res.json({
      success: true,
      message: 'Report deleted successfully'
    });
  } catch (error) {
    logger.error('Error deleting report:', error);
    res.status(500).json({
      success: false,
      message: 'Error deleting report',
      error: error.message
    });
  }
};

// Get reports by type
const getReportsByType = async (req, res) => {
  try {
    const { type } = req.params;
    
    const reports = await Report.find({ type })
      .populate('generatedBy', 'firstName lastName role')
      .sort({ createdAt: -1 });
    
    res.json({
      success: true,
      data: reports
    });
  } catch (error) {
    logger.error('Error fetching reports by type:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching reports by type',
      error: error.message
    });
  }
};

module.exports = {
  getAllReports,
  getReportById,
  generateAnimalHealthReport,
  generateVisitorAnalyticsReport,
  generateFinancialReport,
  generateExhibitOccupancyReport,
  deleteReport,
  getReportsByType
};
